Document ::= Definition+
Definition ::= TypeSystemDefinition | OperationDefinition | FragmentDefinition
OperationDefinition ::= <Ignored> OperationType? <Ignored> VariableDefinitions? <Ignored> Directives? SelectionSet
Query ::= "query"
Mutation ::= "mutation"
OperationType ::= <Ignored> Query <Ignored> Name? | <Ignored> Mutation <Ignored> Name?
VariableDefinitions ::= <"("> VariableDefinition+ <")">
SourceCharacter ::= #"[\x{9}\x{A}\x{D}\x{20}-\uFFFF]"
Ignored ::= Ignore*
Ignore ::= UnicodeBOM | WhiteSpace | LineTerminator | Comment | Comma
UnicodeBOM ::= "\uFEFF"
WhiteSpace ::= #"[\x{9}\x{20}]"
LineTerminator ::= #"\x{A}" | #"\x{D}\x{A}" | #"\x{D}"
CommentChar ::= #"[\x{9}\x{20}-\uFFFF]"
Comment ::= "#" CommentChar*
Comma ::= ","
Punctuator ::= #"[!$().:=@\[\]\{\}]"
Name ::= #"[_A-Za-z][_0-9A-Za-z]*"
NegativeSign ::= "-"
NonZeroDigit ::= #"[1-9]"
Digit ::= #"[0-9]"
IntegerPart ::= NegativeSign? '0' | NegativeSign? NonZeroDigit Digit*
IntValue ::= #"[\+\-0-9]+"
FractionalPart ::= "." Digit+
ExponentIndicator ::= "e" | "E"
Sign ::= "+" | "-"
ExponentPart ::= ExponentIndicator Sign? Digit+
FloatValue ::= #"[\+\-0-9]+\.[0-9]"
EscapedUnicode ::= #"[0-9A-Fa-f]{4}"
EscapedCharacter ::= "\\" #"[\"\/bfnrt]"
StringCharacter ::= #"[\x{9}\x{20}\x{21}\x{23}-\x{5B}\x{5D}-\uFFFF]" | "\\" "u" EscapedUnicode | "\\" EscapedCharacter
StringValue ::=  <"\""><"\""> | <"\""> StringCharacter+ <"\"">
Token ::= Punctuator | Name | IntValue | FloatValue | StringValue
EnumValue ::= Name
Value ::= Variable | IntValue | FloatValue | ListValue | StringValue | BooleanValue | EnumValue | ObjectValue
Variable ::= <"$"> Name
VariableDefinition ::= Variable <":"> <Ignored> Type DefaultValue? <Ignored>
Type ::= NamedType | ListType | NonNullType
NamedType ::= Name
ListType ::= <"["> Type <"]">
NonNullType ::= NamedType <"!"> | ListType <"!">
DefaultValue ::= Value
BooleanValue ::= "true" | "false"
ObjectValue ::= <"{"> <"}"> | <"{"> ObjectField <"}">
ObjectField ::= Name <":"> Value
OneOrMoreValue ::= Value | Value <","> <Ignored> OneOrMoreValue
ListValue ::= <"["> <"]"> | <"["> OneOrMoreValue <"]">
Directives ::= Directive+
Directive ::= <"@"> Name Arguments? <Ignored>
Arguments ::= <"("> <Ignored> Argument+ <")">
Argument ::= Name <":"> <Ignored> ArgumentValue <Ignored>*
ArgumentValue ::= Value | Variable
Alias ::= Name <":">
FragmentDefinition ::= <"fragment"> <Ignored> FragmentName <Ignored> TypeCondition Directives? SelectionSet
FragmentName ::= Name
TypeCondition ::= <"on"> <Ignored> NamedType <Ignored>
SelectionSet ::= <"{"> <Ignored> Selection+ <"}"> <Ignored>
Selection ::= Field <Ignored> | FragmentSpread <Ignored> | InlineFragment <Ignored>
Field ::= Alias? <Ignored> Name <Ignored> Arguments? <Ignored> Directives? SelectionSet?
FragmentSpread ::= <"..."> FragmentName <Ignored> Directives?
InlineFragment ::= <"..."> <Ignored> TypeCondition? Directives? SelectionSet
TypeSystemDefinition ::= TypeDefinition | InterfaceDefinition | UnionDefinition | SchemaDefinition | EnumDefinition | InputDefinition | DirectiveDefinition | TypeExtensionDefinition | ScalarDefinition
TypeDefinition ::= <"type"> <Ignored> Name <Ignored> TypeImplements? <Ignored> <"{"> <Ignored> TypeFields* <Ignored> <"}"> <Ignored>
TypeSystemType ::= "schema" | "scalar" | "type" | "interface" | "union" | "enum" | "input" | "extend" | "directive"
TypeFields ::= TypeField | TypeField TypeFields
TypeField ::= Name TypeFieldArguments? <":"> <Ignored> [TypeFieldType | TypeFieldTypeRequired] <Ignored>
TypeFieldTypeRequired ::= TypeFieldType <"!">
TypeFieldType ::= Name | ListTypeName
ListTypeName ::= <"["> [TypeFieldType | TypeFieldTypeRequired] <"]">
TypeFieldArguments ::= <"("> TypeFieldArgument+ <")">
TypeRequired ::= Type <"!">
TypeFieldArgument ::= Name <":"> <Ignored> [Type | TypeRequired] <Ignored> TypeFieldArgumentDefault?
TypeFieldArgumentDefault ::= <"="> <Ignored> [StringValue | BooleanValue | IntValue | FloatValue]
TypeImplements ::= <"implements"> <Ignored> TypeNames
UnionDefinition ::= <"union"> <Ignored> Name <Ignored> <"="> <Ignored> UnionTypeNames
UnionTypeNames ::= Name <Ignored> | Name <Ignored> <"|"> <Ignored> UnionTypeNames
TypeNames ::= Name | Name <Ignored> TypeNames
InterfaceDefinition ::= <"interface"> <Ignored> Name <Ignored> <"{"> <Ignored> TypeFields <Ignored> <"}"> <Ignored>
SchemaDefinition ::= <"schema"> <Ignored> <"{"> SchemaTypes <"}"> <Ignored>
SchemaTypes ::= SchemaType+
SchemaType ::= QueryType | MutationType
QueryType ::= <Ignored> <"query"> <":"> <Ignored> Name <Ignored>
MutationType ::= <Ignored> <"mutation"> <":"> <Ignored> Name <Ignored>
EnumDefinition ::= <"enum"> <Ignored> Name <Ignored> <"{"> EnumFields <"}"> <Ignored>
EnumFields ::= EnumField | EnumField EnumFields
EnumField ::= <Ignored> Name <Ignored> EnumType?
EnumType ::= <"@enum"> EnumTypeInt EnumValue <Ignored>
EnumValue ::= <"("> <"value:"> <Ignored> IntValue <")">
EnumTypeInt ::= "Int"
InputDefinition ::= <"input"> <Ignored> Name <Ignored> <"{"> <Ignored> InputTypeFields <"}"> <Ignored>
InputTypeFields ::= InputTypeField | InputTypeField InputTypeFields
InputTypeField ::= Name <":"> <Ignored> [TypeFieldType | TypeFieldTypeRequired] <Ignored>
DirectiveDefinition ::= <"directive"> <Ignored> DirectiveName <Ignored> DirectiveOnName <Ignored>
DirectiveName ::= <"@">Name
DirectiveOnName ::= <"on"> <Ignored> Name
TypeExtensionDefinition ::= <"extend"> <Ignored> TypeDefinition
ScalarDefinition ::= <"scalar"> <Ignored> Name
